{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","website/tests/app.lint-test.js","website/tests/helpers/destroy-app.js","website/tests/helpers/module-for-acceptance.js","website/tests/helpers/resolver.js","website/tests/helpers/start-app.js","website/tests/integration/components/content-container-test.js","website/tests/integration/components/dataset-square-test.js","website/tests/integration/components/modal-window-test.js","website/tests/integration/components/project-square-test.js","website/tests/test-helper.js","website/tests/tests.lint-test.js","website/tests/unit/routes/about-test.js","website/tests/unit/routes/blog-test.js","website/tests/unit/routes/cv-test.js","website/tests/unit/routes/datasets-test.js","website/tests/unit/routes/home-test.js","website/tests/unit/routes/index-test.js","website/tests/unit/routes/projects-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('website/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('components/content-container.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/content-container.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('components/dataset-square.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/dataset-square.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('components/modal-window.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/modal-window.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('components/project-square.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/project-square.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'resolver.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/about.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/blog.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/blog.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/cv.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/cv.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/datasets.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/datasets.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/home.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('routes/projects.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/projects.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n});","define('website/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('website/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'website/tests/helpers/start-app', 'website/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _websiteTestsHelpersStartApp, _websiteTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _websiteTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _websiteTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('website/tests/helpers/resolver', ['exports', 'website/resolver', 'website/config/environment'], function (exports, _websiteResolver, _websiteConfigEnvironment) {\n\n  var resolver = _websiteResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _websiteConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _websiteConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('website/tests/helpers/start-app', ['exports', 'ember', 'website/app', 'website/config/environment'], function (exports, _ember, _websiteApp, _websiteConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _websiteConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _websiteApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('website/tests/integration/components/content-container-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('content-container', 'Integration | Component | content container', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'CbRvi1R9',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"content-container\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'RvP0kvQh',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"content-container\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('website/tests/integration/components/dataset-square-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('dataset-square', 'Integration | Component | dataset square', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '3sTS50D8',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"dataset-square\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'VyVdUphB',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"dataset-square\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('website/tests/integration/components/modal-window-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('modal-window', 'Integration | Component | modal window', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'WYIjlv9G',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"modal-window\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'ulcuO/QR',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"modal-window\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('website/tests/integration/components/project-square-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('project-square', 'Integration | Component | project square', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'lDUwuqUz',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"project-square\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '1UXpGVQy',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"project-square\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('website/tests/test-helper', ['exports', 'website/tests/helpers/resolver', 'ember-qunit'], function (exports, _websiteTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_websiteTestsHelpersResolver['default']);\n});","define('website/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/destroy-app.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/resolver.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/start-app.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('integration/components/content-container-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/content-container-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('integration/components/dataset-square-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/dataset-square-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('integration/components/modal-window-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/modal-window-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('integration/components/project-square-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/project-square-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'test-helper.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/about-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/blog-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/blog-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/cv-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/cv-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/datasets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/datasets-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/home-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/index-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n\n  QUnit.test('unit/routes/projects-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'unit/routes/projects-test.js should pass ESLint\\n\\n1:1 - Parsing error: The keyword \\'import\\' is reserved (null)');\n  });\n});","define('website/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/blog-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:blog', 'Unit | Route | blog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/cv-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:cv', 'Unit | Route | cv', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/datasets-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:datasets', 'Unit | Route | datasets', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/home-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('website/tests/unit/routes/projects-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:projects', 'Unit | Route | projects', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('website/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;","file":"tests.js"}