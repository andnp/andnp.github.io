{"version":3,"sources":["components/utils/Markdown.tsx","components/routes/papers/PapersRoute.tsx"],"names":["md","markdown_it__WEBPACK_IMPORTED_MODULE_1__","highlight","str","lang","highlight_js__WEBPACK_IMPORTED_MODULE_0__","value","e","use","markdown_it_katex__WEBPACK_IMPORTED_MODULE_2___default","a","render","data","Markdown","_super","props","_this","call","this","state","raw","fetchRemote","remote","__extends","prototype","componentDidUpdate","nextProps","setState","markdown","react__WEBPACK_IMPORTED_MODULE_3__","className","style","width","dangerouslySetInnerHTML","__html","fetch","then","Object","_utils_fp__WEBPACK_IMPORTED_MODULE_4__","__webpack_exports__","bibtex__WEBPACK_IMPORTED_MODULE_0__","entries_raw","map","entry","titleRaw","getFieldAsString","authorsRaw","publisher","year","Error","title","endsWith","authorList","split","author","names","trim","length","lastName","lastAuthorIdx","join","PapersRoute","react__WEBPACK_IMPORTED_MODULE_1__","maxWidth","_utils_Markdown__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"6dAMMA,EAAKC,EAAW,CACpBC,UAAW,SAACC,EAAKC,GACf,GAAIA,GAAQC,EAAA,YAAiBD,GAC3B,IACE,OAAOC,EAAA,UAAeD,EAAMD,GAAKG,MACjC,MAAOC,IAEX,MAAO,MAIXP,EAAGQ,IAAIC,EAAAC,GAEP,IAAMC,EAAS,SAACC,GAGd,OAFiBZ,EAAGW,OAAOC,IAgB7BC,EAAA,SAAAC,GACE,SAAAD,EAAYE,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YACZF,EAAKG,MAAQ,CAAEnB,GAAI,IAEf,QAASe,EACXC,EAAKG,MAAQ,CAAEnB,GAAIW,EAAOI,EAAMK,MACvB,WAAYL,GACrBC,EAAKK,YAAYN,EAAMO,UA2B7B,OAnCuBC,EAAAV,EAAAC,GAYdD,EAAAW,UAAAC,mBAAP,SAA0BC,GACpB,QAASA,EACXR,KAAKS,SAAS,CAAE3B,GAAIW,EAAOe,EAAUN,OAC5B,WAAYM,GACrBR,KAAKG,YAAYK,EAAUJ,SAIxBT,EAAAW,UAAAb,OAAP,WACE,IAAMiB,EAAWV,KAAKC,MAAMnB,GAC5B,OACE6B,EAAA,qBAAKC,UAAU,gBAAgBC,MAAO,CAAEC,MAAO,SAC7CH,EAAA,sBAAMI,wBAAyB,CAAEC,OAAQN,OAKvCf,EAAAW,UAAAH,YAAR,SAAoBC,GAApB,IAAAN,EAAAE,KACEiB,MAAMb,GACHc,KAAKC,OAAAC,EAAA,EAAAD,CAAW,SAChBD,KAAKzB,GACLyB,KAAK,SAAApC,GAAM,OAAAgB,EAAKW,SAAS,CAAE3B,GAAEA,OAEpCa,EAnCA,CAAuBgB,EAAA,WAqCRU,EAAA,sZCITX,EAAW,sBAzEDS,OAAAG,EAAA,aAAAH,CAAa,qwDA6CDI,YAAYC,IAAI,SAAAC,GAC1C,IAAMC,EAAWD,EAAME,iBAAiB,SAClCC,EAAaH,EAAME,iBAAiB,UACpCE,EAAYJ,EAAME,iBAAiB,cAAgBF,EAAME,iBAAiB,cAAgBF,EAAME,iBAAiB,YAAc,QAC/HG,EAAOL,EAAME,iBAAiB,QAEpC,GAAwB,kBAAbD,EAAuB,MAAM,IAAIK,MAAM,gDAClD,GAA0B,kBAAfH,EAAyB,MAAM,IAAIG,MAAM,6BAEpD,IAAMC,EAAQN,EAASO,SAAS,KAAOP,EAAWA,EAAW,IAEvDQ,EAAaN,EAAWO,MAAM,OAAOX,IAAI,SAAAY,GAC7C,IAAMC,EAAQD,EAAOE,OAAOH,MAAM,KAClC,GAAIE,EAAME,OAAS,EAAG,OAAOF,EAAM,GAE5B,IAAAG,EAAuBH,EAAK,GAEnC,OAF8BA,EAAK,GAEhB,IAAIG,IAEnBC,EAAgBP,EAAWK,OAAS,EAI1C,OAHAL,EAAWO,GAAiB,OAAOP,EAAWO,GAGvC,OACLT,EAAK,MAHSE,EAAWQ,KAAK,MAGZ,KAAKb,EAAS,MAAMC,EAAI,OAO9BY,KAAK,QAAO,KAG5BC,EAAA,SAAA/C,GAAA,SAAA+C,mDAQA,OAR0BtC,EAAAsC,EAAA/C,GACjB+C,EAAArC,UAAAb,OAAP,WACE,OACEmD,EAAA,qBAAK/B,MAAO,CAAEgC,SAAU,UACtBD,EAAA,cAACE,EAAA,EAAQ,CAAC5C,IAAKQ,MAIvBiC,EARA,CAA0BC,EAAA,WAUXvB,EAAA","file":"static/js/4.2e619673.chunk.js","sourcesContent":["import * as hljs from 'highlight.js';\nimport * as markdownIt from 'markdown-it';\nimport katex from 'markdown-it-katex';\nimport * as React from 'react';\nimport { invokeProp } from '../../utils/fp';\n\nconst md = markdownIt({\n  highlight: (str, lang) => {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value;\n      } catch (e) { /* stub */ }\n    }\n    return '';\n  },\n});\n\nmd.use(katex);\n\nconst render = (data: string) => {\n  const markdown = md.render(data);\n\n  return markdown;\n}\n\ntype MarkdownProps = {\n  raw: string;\n} | {\n  remote: string;\n};\n\ninterface MarkdownState {\n  md: string;\n  position?: number;\n}\n\nclass Markdown extends React.Component<MarkdownProps, MarkdownState> {\n  constructor(props: MarkdownProps) {\n    super(props);\n    this.state = { md: '' };\n\n    if ('raw' in props) {\n      this.state = { md: render(props.raw) };\n    } else if ('remote' in props) {\n      this.fetchRemote(props.remote);\n    }\n  }\n\n  public componentDidUpdate(nextProps: MarkdownProps) {\n    if ('raw' in nextProps) {\n      this.setState({ md: render(nextProps.raw) });\n    } else if ('remote' in nextProps) {\n      this.fetchRemote(nextProps.remote);\n    }\n  }\n\n  public render() {\n    const markdown = this.state.md;\n    return (\n      <div className='markdown-body' style={{ width: '100%' }}>\n        <span dangerouslySetInnerHTML={{ __html: markdown }} />\n      </div>\n    );\n  }\n\n  private fetchRemote(remote: string) {\n    fetch(remote)\n      .then(invokeProp('text'))\n      .then(render)\n      .then(md => this.setState({ md }));\n  }\n}\n\nexport default Markdown;\n","import { parseBibFile, } from 'bibtex';\nimport * as React from 'react';\nimport Markdown from '../../utils/Markdown';\n\nconst bibFile = parseBibFile(`\n@article{pan2018organizing,\n  title={Organizing Experience: A Deeper Look at Replay Mechanisms for Sample-based Planning in Continuous State Domains},\n  author={Pan, Yangchen and Zaheer, Muhammad and White, Adam and Patterson, Andrew and White, Martha},\n  journal={arXiv preprint arXiv:1806.04624},\n  year={2018}\n}\n\n@article{schlegel2018discovery,\n  title={Discovery of Predictive Representations With a Network of General Value Functions},\n  author={Schlegel, Matthew and Patterson, Andrew and White, Adam and White, Martha},\n  year={2018}\n}\n\n@article{schlegel2018general,\n  title={General Value Function Networks},\n  author={Schlegel, Matthew and White, Adam and Patterson, Andrew and White, Martha},\n  journal={arXiv preprint arXiv:1807.06763},\n  year={2018}\n}\n\n@article{ghiassian2018online,\n  title={Online Off-policy Prediction},\n  author={Ghiassian, Sina and Patterson, Andrew and White, Martha and Sutton, Richard S and White, Adam},\n  journal={arXiv preprint arXiv:1811.02597},\n  year={2018}\n}\n\n@inproceedings{le2018supervised,\n  title={Supervised autoencoders: Improving generalization performance with unsupervised regularizers},\n  author={Le, Lei and Patterson, Andrew and White, Martha},\n  booktitle={Advances in Neural Information Processing Systems},\n  pages={107--117},\n  year={2018}\n}\n\n@article{avesani2018open,\n  title={The open diffusion data derivatives, brain data upcycling via integrated publishing of derivatives and reproducible open cloud services},\n  author={Avesani, Paolo and McPherson, Brent and Hayashi, Soichi and Caiafa, Cesar and Henschel, Robert and Garyfallidis, Eleftherios and Kitchell, Lindsey and Bullock, Daniel and Patterson, Andrew and Olivetti, Emanuele and others},\n  year={2018},\n  publisher={PsyArXiv}\n}\n`);\n\n\nconst bibMarkdown = bibFile.entries_raw.map(entry => {\n  const titleRaw = entry.getFieldAsString('TITLE');\n  const authorsRaw = entry.getFieldAsString('AUTHOR');\n  const publisher = entry.getFieldAsString('PUBLISHER') || entry.getFieldAsString('booktitle') || entry.getFieldAsString('journal') || 'arXiv';\n  const year = entry.getFieldAsString('YEAR');\n\n  if (typeof titleRaw !== 'string') throw new Error('Expected bibliographic entry to have a title');\n  if (typeof authorsRaw !== 'string') throw new Error('Expected authors to exist');\n\n  const title = titleRaw.endsWith('.') ? titleRaw : titleRaw + '.';\n\n  const authorList = authorsRaw.split('and').map(author => {\n    const names = author.trim().split(',');\n    if (names.length < 2) return names[0];\n\n    const [lastName, firstName] = names;\n\n    return `${firstName} ${lastName}`;\n  });\n  const lastAuthorIdx = authorList.length - 1;\n  authorList[lastAuthorIdx] = `and ${authorList[lastAuthorIdx]}`;\n  const authors = authorList.join(', ');\n\n  return `\n**${title}** ${authors} _${publisher}_, ${year}\n`;\n});\n\nconst markdown = `\n  ## Papers\n\n  ${bibMarkdown.join('\\n\\n')}\n`;\n\nclass PapersRoute extends React.Component {\n  public render() {\n    return (\n      <div style={{ maxWidth: '800px' }}>\n        <Markdown raw={markdown} />\n      </div>\n    );\n  }\n}\n\nexport default PapersRoute;\n"],"sourceRoot":""}