{"version":3,"sources":["components/utils/Markdown.tsx","services/github.ts","components/routes/ProjectsRoute.tsx"],"names":["md","markdown_it__WEBPACK_IMPORTED_MODULE_1__","highlight","str","lang","highlight_js__WEBPACK_IMPORTED_MODULE_0__","value","e","use","markdown_it_katex__WEBPACK_IMPORTED_MODULE_2___default","a","render","data","Markdown","_super","props","_this","call","this","state","raw","fetchRemote","remote","__extends","prototype","componentDidUpdate","nextProps","setState","markdown","react__WEBPACK_IMPORTED_MODULE_3__","className","style","width","dangerouslySetInnerHTML","__html","fetch","then","Object","_utils_fp__WEBPACK_IMPORTED_MODULE_4__","__webpack_exports__","projectReadmeUrl","username","project","ProjectsRoute_ProjectsRoute","ProjectsRoute","shouldComponentUpdate","path","user","githubUrl","react"],"mappings":"6dAMMA,EAAKC,EAAW,CACpBC,UAAW,SAACC,EAAKC,GACf,GAAIA,GAAQC,EAAA,YAAiBD,GAC3B,IACE,OAAOC,EAAA,UAAeD,EAAMD,GAAKG,MACjC,MAAOC,IAEX,MAAO,MAIXP,EAAGQ,IAAIC,EAAAC,GAEP,IAAMC,EAAS,SAACC,GAGd,OAFiBZ,EAAGW,OAAOC,IAgB7BC,EAAA,SAAAC,GACE,SAAAD,EAAYE,GAAZ,IAAAC,EACEF,EAAAG,KAAAC,KAAMH,IAAMG,YACZF,EAAKG,MAAQ,CAAEnB,GAAI,IAEf,QAASe,EACXC,EAAKG,MAAQ,CAAEnB,GAAIW,EAAOI,EAAMK,MACvB,WAAYL,GACrBC,EAAKK,YAAYN,EAAMO,UA2B7B,OAnCuBC,EAAAV,EAAAC,GAYdD,EAAAW,UAAAC,mBAAP,SAA0BC,GACpB,QAASA,EACXR,KAAKS,SAAS,CAAE3B,GAAIW,EAAOe,EAAUN,OAC5B,WAAYM,GACrBR,KAAKG,YAAYK,EAAUJ,SAIxBT,EAAAW,UAAAb,OAAP,WACE,IAAMiB,EAAWV,KAAKC,MAAMnB,GAC5B,OACE6B,EAAA,qBAAKC,UAAU,gBAAgBC,MAAO,CAAEC,MAAO,SAC7CH,EAAA,sBAAMI,wBAAyB,CAAEC,OAAQN,OAKvCf,EAAAW,UAAAH,YAAR,SAAoBC,GAApB,IAAAN,EAAAE,KACEiB,MAAMb,GACHc,KAAKC,OAAAC,EAAA,EAAAD,CAAW,SAChBD,KAAKzB,GACLyB,KAAK,SAAApC,GAAM,OAAAgB,EAAKW,SAAS,CAAE3B,GAAEA,OAEpCa,EAnCA,CAAuBgB,EAAA,WAqCRU,EAAA,0DCvEFC,SAAmB,SAACC,EAAkBC,GACjD,MAAO,sBAAsBD,EAAQ,IAAIC,EAAO,yWCMlDC,EAAA,SAAA7B,GAAA,SAAA8B,mDAYA,OAZ4BrB,EAAAqB,EAAA9B,GACnB8B,EAAApB,UAAAqB,sBAAP,SAA6BnB,GAC3B,OAAOR,KAAKH,MAAM+B,OAASpB,EAAUoB,MAAQ5B,KAAKH,MAAMgC,OAASrB,EAAUqB,MAGtEH,EAAApB,UAAAb,OAAP,WACE,IAAMqC,EAAYR,EAAiB,QAAStB,KAAKH,MAAM+B,MAEvD,OACEG,EAAA,cAACpC,EAAA,EAAQ,CAACS,OAAQ0B,KAGxBJ,EAZA,CAA4BK,EAAA,WAcbV,EAAA","file":"static/js/5.580e8507.chunk.js","sourcesContent":["import * as hljs from 'highlight.js';\nimport * as markdownIt from 'markdown-it';\nimport katex from 'markdown-it-katex';\nimport * as React from 'react';\nimport { invokeProp } from '../../utils/fp';\n\nconst md = markdownIt({\n  highlight: (str, lang) => {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(lang, str).value;\n      } catch (e) { /* stub */ }\n    }\n    return '';\n  },\n});\n\nmd.use(katex);\n\nconst render = (data: string) => {\n  const markdown = md.render(data);\n\n  return markdown;\n}\n\ntype MarkdownProps = {\n  raw: string;\n} | {\n  remote: string;\n};\n\ninterface MarkdownState {\n  md: string;\n  position?: number;\n}\n\nclass Markdown extends React.Component<MarkdownProps, MarkdownState> {\n  constructor(props: MarkdownProps) {\n    super(props);\n    this.state = { md: '' };\n\n    if ('raw' in props) {\n      this.state = { md: render(props.raw) };\n    } else if ('remote' in props) {\n      this.fetchRemote(props.remote);\n    }\n  }\n\n  public componentDidUpdate(nextProps: MarkdownProps) {\n    if ('raw' in nextProps) {\n      this.setState({ md: render(nextProps.raw) });\n    } else if ('remote' in nextProps) {\n      this.fetchRemote(nextProps.remote);\n    }\n  }\n\n  public render() {\n    const markdown = this.state.md;\n    return (\n      <div className='markdown-body' style={{ width: '100%' }}>\n        <span dangerouslySetInnerHTML={{ __html: markdown }} />\n      </div>\n    );\n  }\n\n  private fetchRemote(remote: string) {\n    fetch(remote)\n      .then(invokeProp('text'))\n      .then(render)\n      .then(md => this.setState({ md }));\n  }\n}\n\nexport default Markdown;\n","import { invokeProp } from \"../utils/fp\";\n\nexport const projectReadmeUrl = (username: string, project: string) => {\n  return `https://rawgit.com/${username}/${project}/master/README.md`;\n};\n\nexport const projectReadme = (username: string, project: string) => {\n  const url = projectReadmeUrl(username, project);\n  \n  return fetch(url).then(invokeProp('text'));\n};","import * as React from 'react';\nimport { projectReadmeUrl } from '../../services/github';\nimport Markdown from '../utils/Markdown';\n\ninterface ProjectsRouteProps {\n  path: string;\n  user?: string;\n}\n\nclass ProjectsRoute extends React.Component<ProjectsRouteProps> {\n  public shouldComponentUpdate(nextProps: ProjectsRouteProps) {\n    return this.props.path !== nextProps.path || this.props.user !== nextProps.user;\n  }\n\n  public render() {\n    const githubUrl = projectReadmeUrl('andnp', this.props.path);\n\n    return (\n      <Markdown remote={githubUrl} />\n    );\n  }\n}\n\nexport default ProjectsRoute;\n"],"sourceRoot":""}